data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
sum(rbinom(weights[j], 1, mortality[j]))/weights
sum(rbinom(weights[j], 1, mortality[j]))/weights
sum(rbinom(weights[j], 1, mortality[j]))/weights
sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
set.seed(1000)
N = 1000
r.boot = double(N)
mortality.boot = double(6)
est.boot = matrix(NA, nrow=N, ncol=2)
for (i in 1:N){
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
#beta_hat
est.boot[i,] = beta_hat
r.boot[i] = -beta_hat[1]/beta_hat[2]
}
CI.boot = quantile(r.boot, c(.025,.975))
CI.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
#data3.boot
probit.fit.boot = glm(mortality~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
mortality.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
probit.fit.boot = glm(mortality.boot~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
probit.fit.boot = glm(mortality.boot~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
probit.fit.boot = glm(mortality.boot~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
probit.fit.boot = glm(mortality.boot~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
probit.fit.boot = glm(mortality.boot~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
set.seed(1000)
N = 1000
r.boot = double(N)
mortality.boot = double(6)
est.boot = matrix(NA, nrow=N, ncol=2)
for (i in 1:N){
for (j in 1:length(data3$mortality)){
mortality.boot[j] = sum(rbinom(weights[j], 1, mortality[j]))/weights[j]
}
data3.boot = data.frame(mortaliy=mortality.boot, dose=dose, weights=weights)
data3.boot
probit.fit.boot = glm(mortality.boot~dose, family=binomial(link=probit),
data = data3.boot, weights=weights)
beta_hat = coef(probit.fit.boot)
beta_hat
est.boot[i,] = beta_hat
r.boot[i] = -beta_hat[1]/beta_hat[2]
}
CI.boot = quantile(r.boot, c(.025,.975))
CI.boot
}
LD.50.bayes = -BETA[100:,1]/BETA[100:,2]
LD.50.bayes = -BETA[100:,1]/BETA[100:,2]
LD.50.bayes = -BETA[100:N,1]/BETA[100:N,2]
set.seed(1000)
w2= c(45,45,34)
w4=c(47,43,28)
w6=c(46,41,21)
w8=c(46,37,16)
temp=rep(c(0,10,20),4)
time=rep(c(2,4,6,8),each=3)
acid= c(w2,w4,w6,w8)
data = data.frame(acid=acid ,time=time,temp=temp)
fit1 = glm(acid~ 1 + factor(temp):time, data = data, family=poisson(link=log))
fit1
?anova
anova(fit1, c(.0706,24))
residuals(fit1)
sum((residuals(fit1)^2)
)
summary(fit1)
names(fit1)
null.deviance(fit1)
deviance(fit1)
df.residual(fit1)
?ftest
mse= 0.706
df1 = 24
df2= df.residual(fit1)
resid.dev = deviance(fit)
F = (resid.dev/8)/(mse*36/24)
mse= 0.706
df1 = 24
df2= df.residual(fit1)
resid.dev = deviance(fit1)
F = (resid.dev/8)/(mse*36/24)
F
F = (3*resid.dev/8)/(mse*36/24)
F
(mse*36/24)/(3*resid.dev/8)
(mse*36-resid.dev)/(mse*36)
(mse*36-resid.dev)/(resid.dev)
((mse*36-resid.dev)/24)/(resid.dev/8)
?legend
CI_t_50[CI_t_50<0]=0
CI_t_50
CI_t_50=-log(2)/int_beta
CI_t_50[CI_t_50<0]=0
CI_t_50
CI_t_50=round(-log(2)/int_beta, 3)
CI_t_50[CI_t_50<0]=0
CI_t_50
dose = seq(0,5)
mortality = c(0/7, 2/9, 3/8, 5/7, 7/9, 10/11)
weights= c(7,9,8,7,9,11)
data3 = data.frame(dose=dose, mortality=mortality, weights=weights)
library(truncnorm)
library(mvtnorm)
Pi = mortality
y1= rbinom(weights[1], 1, Pi[1])
y2= rbinom(weights[2], 1, Pi[2])
y3= rbinom(weights[3], 1, Pi[3])
y4= rbinom(weights[4], 1, Pi[4])
y5= rbinom(weights[5], 1, Pi[5])
y6= rbinom(weights[6], 1, Pi[6])
Y =c(y1,y2,y3,y4,y5,y6)
X2=rep(dose,weights)
M = length(Y)
X1 = rep(1, M)
X = cbind(X1,X2)
sigma0 = matrix(c(1,0,0,1), nrow=2)
beta0= c(1,1)
N = 1000
#Initial Z
Z = rep(NA,M)
for (i in 1:M){
Z[i] = rnorm(1, X[i,]*beta0, 1)
}
BETA = matrix(rep(NA, N*2), nrow=N)
sigma_hat = solve(solve(sigma0)+t(X)%*%X)
beta_hat = sigma_hat%*%(solve(sigma0)%*%beta0+t(X)%*%Z)
for (i in 1:N){
beta = rmvnorm(1, beta_hat, sigma_hat)
for (j in 1:M){
if (Y[j]==1){
Z[j] = rtruncnorm(1,a=0, b=Inf, mean= X[j,]%*%t(beta), sd= 1 )
} else if(Y[j]==0){
Z[j] = rtruncnorm(1,a=-Inf, b=0, mean= X[j,]%*%t(beta), sd= 1 )
}
}
BETA[i,] = beta
beta_hat = sigma_hat%*%(solve(sigma0)%*%beta0+t(X)%*%Z)
}
LD.50.bayes = -BETA[100:N,1]/BETA[100:N,2]
CI.bayes = quantile(LD.50.bayes, c(.025, .975))
post.mean =round(mean(LD.50.bayes),3)
post.mean
((mse*36-resid.dev)/resid.dev)/((24-8)/8)
((mse*36-resid.dev)/24)/(resid.dev/8)
((mse*36-3*resid.dev)/(3*resid.dev))/((24-8)/8)
if(!require(installr)) { install.packages("installr"); require(installr)}
check.for.updates.R()
install.R()
install.R()
A = matrix(c(2,1,1,2), nrow=2)
A
eig(A)
eigen(A)
?rbeta
hist(rbeta(1000,1,1))
hist(rbeta(1000,.1,.1))
hist(rbeta(1000,.01,.01))
hist(rbeta(1000,.1,.1))
exp(.422)
setwd("C:/Users/dipesh/Desktop/GoogleDrive/GradClasses/SemIII/STA841/HW4")
#install.packages("aod")
#install.packages("plyr")
library(aod)
library(dplyr)
library(Matrix)
library(tidyr)
#Problem 1
cancermap = read.table("cancermap.dat")
cancermap=as.matrix(cancermap)
rotate <- function(x) t(apply(x, 2, rev))
#1.1
image(rotate(cancermap))
legend("bottomright", c("","low", "high"), col = c("white","red","orange"), pch=c(15,15,15))
#1.2
##just removed the data without all four neighbors
accept = matrix(0,nrow(cancermap),ncol(cancermap))
for (i in 2:(nrow(cancermap)-1)){
for (j in 2:(ncol(cancermap)-1)){
if (max(cancermap[i-1,j],cancermap[i+1,j],cancermap[i,j-1],cancermap[i,j+1])<2){
#if neighboring cell not in map remove the data
accept[i,j] = 1
}
}
}
cancermap1 = matrix(0,nrow(cancermap),ncol(cancermap))
cancermap1[which(accept==1)] = cancermap[which(accept==1)+1]+cancermap[which(accept==1)-1]+
cancermap[which(accept==1)+ncol(cancermap)]+cancermap[which(accept==1)-ncol(cancermap)]
y=cancermap[which(accept==1)]
y1 = cancermap1[which(accept==1)]
m1=glm(cbind(y,1-y)~y1, family=binomial(link="logit"))
summary(m1)
devResid = round(m1$deviance,2)
df = m1$df.residual
beta = m1$coefficient[2]
odds=exp(beta)-1
#one more neighbor being in high rate increases the odds by exp(beta) of being in high rate. So, with
# all neighbors in high rate implies really high odds ratio
#1.3
test <- function(data){
indata = which(data==1|data==0)
x = matrix(2, nrow(data), ncol(data))
x[indata] = sample(data[indata])
accept = matrix(0,nrow(x),ncol(x))
data1_1 = matrix(0,nrow(x),ncol(x))
for (i in 2:(nrow(x)-1)){
for (j in 2:(ncol(x)-1)){
if (max(x[i-1,j],x[i+1,j],x[i,j-1],x[i,j+1])<2){#if neighboring cell not in map ignore the data
accept[i,j] = 1
}
}
}
data1 = matrix(0,nrow(data),ncol(data))
data1[which(accept==1)] = x[which(accept==1)+1]+x[which(accept==1)-1]+
x[which(accept==1)+ncol(x)]+x[which(accept==1)-ncol(x)]
y=data[which(accept==1)]
y1 = data1[which(accept==1)]
fit=glm(cbind(y,1-y)~y1, family=binomial(link="logit"))
fit$coefficients
}
BETA <- replicate(5000, test(cancermap))
hist(BETA[2,])
quantile(BETA[2,], c(.005,.995))
cancermap2 = matrix(0,nrow(cancermap),ncol(cancermap))
cancermap2[which(accept==1)] = cancermap[which(accept==1)-ncol(cancermap)]+
cancermap[which(accept==1)+ncol(cancermap)]
y2 = cancermap2[which(accept==1)]
m2=glm(cbind(y,1-y)~y1+y2, family=binomial(link="logit"))
summary(m2)
exp(.01)
hist(BETA[2,], xlab="beta")
hist(BETA[2,], xlab="beta", main="")
ses = rep(c("A","B","C","D", "E","F"),4)
status = rep(c("well","mild","moderate","impaired"), each=6)
count = c(64,57,57,72,36,21,94,94,105,141,97,71,58,54,65,77,54,54,46,40,60,94,78,71)
well = c(64,57,57,72,36,21)
mild = c(94,94,105,141,97,71)
moderate = c(58,54,65,77,54,54)
impaired = c(46,40,60,94,78,71)
data2 = data.frame(ses, status, count)
data2$status=factor(data2$status, ordered=T)
fit2 = polr(status~ses, weights = count, data = data2)
summary(fit2)
library(MASS)
ses = rep(c("A","B","C","D", "E","F"),4)
status = rep(c("well","mild","moderate","impaired"), each=6)
count = c(64,57,57,72,36,21,94,94,105,141,97,71,58,54,65,77,54,54,46,40,60,94,78,71)
well = c(64,57,57,72,36,21)
mild = c(94,94,105,141,97,71)
moderate = c(58,54,65,77,54,54)
impaired = c(46,40,60,94,78,71)
data2 = data.frame(ses, status, count)
data2$status=factor(data2$status, ordered=T)
fit2 = polr(status~ses, weights = count, data = data2)
summary(fit2)
exp(.72)
ses = rep(c("A","B","C","D", "E","F"),4)
status = rep(c("well","mild","moderate","impaired"), each=6)
count = c(64,57,57,72,36,21,94,94,105,141,97,71,58,54,65,77,54,54,46,40,60,94,78,71)
well = c(64,57,57,72,36,21)
mild = c(94,94,105,141,97,71)
moderate = c(58,54,65,77,54,54)
impaired = c(46,40,60,94,78,71)
data2 = data.frame(ses, status, count)
data2$status=factor(data2$status, ordered=T)
#2.1
# logit P(Y<=j|x) = alpha_j + socioeconomic effect
fit2 = polr(status~ses, weights = count, data = data2)
summary(fit2)
names(fit2)
fit2$coefficients
fit2$contrasts
fit2$zeta
exp(.72)
data4 = read.table("fiji.dat", header =T)
data4$marriage = factor(data4$marriage, ordered=F)
data4$edu= factor(data4$edu, ordered=F)
data4$abode = factor(data4$abode)
data4$count = round(data4$average*data4$tot,0)
View(data4)
fit4 = glm(count~marriage+edu+abode, family=poisson(link=log),
offset = log(tot), subset=(tot>0), data = data4)
summary(fit4)
s2= sum(fit4$sesid^2/fit4$fitted)/fit4$df.resid
summary(fit4, dispersion=s2)
s2
s2= sum(fit4$resid^2/fit4$fitted)/fit4$df.resid
summary(fit4, dispersion=s2)
s2
s2= sum(fit4$resid^2/fit4$fitted)/fit4$df.resid
summary(fit4, dispersion=s2)
vcov(fit4, dispersion=s2)
varcovar=vcov(fit4, dispersion=s2)
cov= varcovar[c("(Intercept)","edu3", "marriage3"),
c("(Intercept)","edu3", "marriage3")]
var = cov[1,1]+cov[2,2]+cov[3,3]+2*cov[2,1]+ 2*cov[3,1]+2*cov[3,2]
mu = fit4$coefficients["(Intercept)"] + fit4$coefficients["edu3"]+
fit4$coefficients["marriage3"]
samples = exp(rnorm(5000, mu, sqrt(var)))
quantile(samples, c(.025,.975))
varcovar=vcov(fit4)
cov= varcovar[c("(Intercept)","edu3", "marriage3"),
c("(Intercept)","edu3", "marriage3")]
var = cov[1,1]+cov[2,2]+cov[3,3]+2*cov[2,1]+ 2*cov[3,1]+2*cov[3,2]
mu = fit4$coefficients["(Intercept)"] + fit4$coefficients["edu3"]+
fit4$coefficients["marriage3"]
samples = exp(rnorm(5000, mu, sqrt(var)))
quantile(samples, c(.025,.975))
fit4 = glm(count~marriage+edu+abode, family=poisson(link=log),
offset = log(tot), subset=(tot>0), data = data4)
summary(fit4)
s2= sum(fit4$resid^2/fit4$fitted)/fit4$df.resid
summary(fit4, dispersion=s2)
exp(2.03017)
exp(2.03017)-1
coeff= round(fit4$coefficient),3)
coeff= round(fit4$coefficient,3)
coeff[10]
exp(,061)
exp(.061)
exp(.003)
exp(-.001)
round(exp(coeff[10]),2)-1
exp(.06)-1
round(exp(coeff[10]),2)-1
round(exp(coeff[10]),2)-1
fit4 = glm(count~marriage+edu+abode, family=poisson(link=log),
offset = log(tot), subset=(tot>0), data = data4)
summary(fit4)
s2= sum(fit4$resid^2/fit4$fitted)/fit4$df.resid
summary(fit4, dispersion=s2)
coeff= round(fit4$coefficient,3)
abode2 = round(exp(coeff[10]),2)-1
